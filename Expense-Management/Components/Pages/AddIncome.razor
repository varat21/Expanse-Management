@page "/addIncome"
@using Expense_Management.Components.Layout
<div class="page d-flex bg-white">
    <div class="sidebar bg-white text-dark">
        <NavMenu /> 
     </div>
<div class="container-fluid py-4 shadow-lg min-width-99">
    <div class="w-75 mb-4">
        <h1 class="text-center">Add Income</h1>
    </div>
        

        @if (IsSuccessAlertVisible)
        {
            <div class="alert alert-success" role="alert">
               Income added successfully!
            </div>
        }
    <div>
        <div>
            <form @onsubmit="HandleSubmit">
                <div class="mb-3">
                    <label class="form-label">
                        Title
                    </label>
                    <input type="text" id="income-title" @bind="IncomeTitle"
                    placeholder="Enter title"
                           class="form-control" required />
                </div>

                <div class="mb-3">
                    <label for="income-amount" class="form-label">
                        Amount
                    </label>
                    <input type="number" id="income-amount" @bind="IncomeAmount"
                    placeholder="Add Amount"
                           class="form-control" required />
                </div>

                <div class="mb-3">
                    <label for="income-date" class="form-label">
                        Date
                    </label>
                    <input type="date" id="income-date" @bind="IncomeDate"
                           class="form-control" required />
                </div>

                <div class="mb-3">
                    <label for="income-tags" class="form-label">
                        Tags (Comma Separated)
                    </label>
                    <input type="text" id="income-tags" @bind="IncomeTags"
                           class="form-control" placeholder="e.g., Salary, Bonus" />
                </div>

                <div class="mb-3">
                    <label for="income-note" class="form-label">
                        Note
                    </label>
                    <textarea id="income-note" @bind="IncomeNote" class="form-control" rows="3"
                              placeholder="Optional notes about the income"></textarea>
                </div>

                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-primary">
                        Add Income
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
</div>
@code {
    private string IncomeTitle { get; set; } = string.Empty;
    private decimal IncomeAmount { get; set; }
    private DateTime IncomeDate { get; set; } = DateTime.Today;
    private string IncomeTags { get; set; } = string.Empty; 
    private string IncomeNote { get; set; } = string.Empty; 
    private List<Income> Incomes { get; set; } = new();
    private bool IsSuccessAlertVisible { get; set; } = false;


    [Inject]
    private NavigationManager NavManager { get; set; } = default!;

    protected override void OnInitialized()
    {
        LoadIncomeData(); // load existing data on initialization
    }

    private void HandleSubmit()
    {
        if (!string.IsNullOrWhiteSpace(IncomeTitle) && IncomeAmount > 0)
        {
            // Parse tags into a list
            var tagsList = string.IsNullOrWhiteSpace(IncomeTags)
                ? new List<string>()
                : IncomeTags.Split(',').Select(tag => tag.Trim()).ToList();

            // Add the new income entry
            Incomes.Add(new Income
                {
                    IncomeTitle = IncomeTitle,
                    IncomeAmount = IncomeAmount,
                    IncomeDate = IncomeDate,
                    Tags = tagsList, // Store the tags
                    Note = IncomeNote // Store the note
                });

            SaveIncomeData(); // Save updated list to file
            IsSuccessAlertVisible = true;
            // Reset form fields
            IncomeTitle = string.Empty;
            IncomeAmount = 0;
            IncomeTags = string.Empty;
            IncomeNote = string.Empty;
        }
    }

    private void SaveIncomeData()
    {
        try
        {
            string filePath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
                "Income.json"
            );

            var data = System.Text.Json.JsonSerializer.Serialize(Incomes);
            File.WriteAllText(filePath, data);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving income data: {ex.Message}");
        }
    }

    private void LoadIncomeData()
    {
        try
        {
            string filePath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
                "Income.json"
            );

            if (File.Exists(filePath))
            {
                var data = File.ReadAllText(filePath);
                Incomes = System.Text.Json.JsonSerializer.Deserialize<List<Income>>(data) ?? new List<Income>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading income data: {ex.Message}");
        }
    }

    private class Income
    {
        public string IncomeTitle { get; set; } = string.Empty;
        public decimal IncomeAmount { get; set; }
        public DateTime IncomeDate { get; set; }
        public List<string> Tags { get; set; } = new(); // tags field
        public string Note { get; set; } = string.Empty; // note field
    }
}
