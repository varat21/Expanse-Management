@page "/addExpense"
@using Expense_Management.Components.Layout
<div class="page d-flex bg-white">
    <div class="sidebar bg-white text-dark">
        <NavMenu /> 
     </div>

<div class="container-fluid py-4 shadow-lg min-width-99">
    <div class="mb-5">
        <h1 class="text-center">Add Expense</h1>
    </div>

    <div class="card mx-auto">
        <div class="card-body">
            <form @onsubmit="AddExpenseHandler">
                <div class="mb-3">
                    <label for="item" class="form-label">Item</label>
                    <input type="text" id="item" placeholder="Enter item" @bind="ExpenseItem"
                           required
                           class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="expense-amount" class="form-label">Amount</label>
                    <input type="number" id="expense-amount" @bind="ExpenseCost"
                           required
                           class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="expense-date" class="form-label">Date</label>
                    <input type="date" id="expense-date" @bind="ExpenseDate"
                           required
                           class="form-control" />
                </div>

                <div class="mb-3">
                    <label for="expense-tags" class="form-label">Tags (Comma Separated)</label>
                    <input type="text" id="expense-tags" @bind="ExpenseTags"
                           class="form-control" placeholder="e.g., Rent, Utilities" />
                </div>

                <div class="mb-3">
                    <label for="expense-note" class="form-label">Note</label>
                    <textarea id="expense-note" @bind="ExpenseNote" class="form-control" rows="3"
                              placeholder="Optional notes about the expense"></textarea>
                </div>

                @if (ShowInsufficientBalanceAlert)
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        Insufficient balance for this expense.
                    </div>
                }

                <div class="text-end">
                    <button type="submit" class="btn btn-primary">Add Expense</button>
                </div>
            </form>
        </div>
    </div>
</div>
</div>
@code {
    private DateTime? ExpenseDate { get; set; }
    private string? ExpenseItem { get; set; }
    private decimal? ExpenseCost { get; set; }
    private string ExpenseTags { get; set; } = string.Empty;
    private string ExpenseNote { get; set; } = string.Empty;
    private bool ShowInsufficientBalanceAlert { get; set; } = false;

    [Inject]
    private NavigationManager NavManager { get; set; } = default!;

    private decimal CurrentBalance { get; set; } = 1000.00m;  // Example balance

    private void AddExpenseHandler()
    {
        ShowInsufficientBalanceAlert = false;

        if (ExpenseDate != null && !string.IsNullOrEmpty(ExpenseItem) && ExpenseCost != null)
        {
            if (IsSufficientBalance(ExpenseCost.Value))
            {
                var tagsList = string.IsNullOrWhiteSpace(ExpenseTags)
                    ? new List<string>()
                    : ExpenseTags.Split(',').Select(tag => tag.Trim()).ToList();

                SaveExpenseData(tagsList);
                NavManager.NavigateTo("/home");
            }
            else
            {
                ShowInsufficientBalanceAlert = true;
            }
        }
    }

    private bool IsSufficientBalance(decimal expenseCost)
    {
        return expenseCost <= CurrentBalance;
    }

    private void SaveExpenseData(List<string> tags)
    {
        try
        {
            var expense = new Expense
                {
                    ExpenseDate = ExpenseDate.Value,
                    ExpenseItem = ExpenseItem!,
                    ExpenseCost = ExpenseCost.Value,
                    Tags = tags,
                    Note = ExpenseNote
                };

            string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Expense.json");

            List<Expense> expenses = new();
            if (File.Exists(filePath))
            {
                var existingData = File.ReadAllText(filePath);
                expenses = System.Text.Json.JsonSerializer.Deserialize<List<Expense>>(existingData) ?? new List<Expense>();
            }

            expenses.Add(expense);

            // Serialize updated data
            string jsonData = System.Text.Json.JsonSerializer.Serialize(expenses, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });

            // Save to file
            File.WriteAllText(filePath, jsonData);

            // Deduct expense from balance
            CurrentBalance -= expense.ExpenseCost;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving expense data: {ex.Message}");
        }
    }

    private class Expense
    {
        public DateTime ExpenseDate { get; set; }
        public string ExpenseItem { get; set; } = string.Empty;
        public decimal ExpenseCost { get; set; }
        public List<string> Tags { get; set; } = new();
        public string Note { get; set; } = string.Empty;
    }
}
