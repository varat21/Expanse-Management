@page "/home"
@using Expense_Management.Components.Layout

<div class="page d-flex bg-white">
    <div class="sidebar bg-white text-dark">
        <NavMenu /> 
    </div>

    <div class="container-fluid py-4 shadow-lg min-width-99">
        <!-- Summary Cards -->
        <div class="row mb-4 text-center">
            <div class="col-md-3">
                <div class="card shadow" style="background-color: #f0f8ff;">
                    <div class="card-body">
                        <h5 class="card-title text-muted">Total Number Transactions</h5>
                        <p class="h4 font-weight-bold">@TotalTransactions</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card shadow" style="background-color: #d4edda;">
                    <div class="card-body">
                        <h5 class="card-title text-muted">Cash Inflow</h5>
                        <p class="h4 font-weight-bold">@CashInflow.ToString("C")</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card shadow" style="background-color: #f8d7da;">
                    <div class="card-body">
                        <h5 class="card-title text-muted">Cash Outflow</h5>
                        <p class="h4 font-weight-bold">@CashOutflow.ToString("C")</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card shadow" style="background-color: #fff3cd;">
                    <div class="card-body">
                        <h5 class="card-title text-muted">Debt</h5>
                        <p class="h4 font-weight-bold">@TotalDebt.ToString("C")</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Error Alert -->
        @if (IsError)
        {
            <div class="alert alert-danger" role="alert">
                Cash Outflow exceeds Total Amount Transactions. Please check your balance.
            </div>
        }

        <!-- Highest/Lowest Transactions -->
        <div class="row mb-4 text-center">
            <div class="col-6 col-sm-3">
                <div class="card shadow" style="font-size: 0.9rem; background-color: #f0f8ff;">
                    <div class="card-body p-2">
                        <h6 class="card-title text-muted">Total transactions </h6>
                        <p class="h6 font-weight-bold">@TotalAmountTransactions</p>
                    </div>
                </div>
            </div>
            <div class="col-6 col-sm-3">
                <div class="card shadow" style="font-size: 0.9rem; background-color: #d4edda;">
                    <div class="card-body p-2">
                        <h6 class="card-title text-muted">Highest Inflow</h6>
                        <p class="h6 font-weight-bold">@HighestInflow?.Title</p>
                        <p>@HighestInflow?.Amount.ToString("C")</p>
                    </div>
                </div>
            </div>
            <div class="col-6 col-sm-3">
                <div class="card shadow" style="font-size: 0.9rem; background-color: #f8d7da;">
                    <div class="card-body p-2">
                        <h6 class="card-title text-muted">Highest Outflow</h6>
                        <p class="h6 font-weight-bold">@HighestOutflow?.Title</p>
                        <p>@HighestOutflow?.Amount.ToString("C")</p>
                    </div>
                </div>
            </div>
            <div class="col-6 col-sm-3">
                <div class="card shadow" style="font-size: 0.9rem; background-color: #fff3cd;">
                    <div class="card-body p-2">
                        <h6 class="card-title text-muted">Highest Debt</h6>
                        <p class="h6 font-weight-bold">@HighestDebt?.Title</p>
                        <p>@HighestDebt?.Amount.ToString("C")</p>
                    </div>
                </div>
            </div>
        </div>


        <!-- Transaction Report -->
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Transaction Report</h4>
            </div>
            <div class="card-body">
                <!-- Search and Filter Section -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <input type="text" class="form-control" placeholder="Search by title" @bind="SearchText" />
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" @bind="SelectedType">
                            <option value="">All Types</option>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                            <option value="Debt">Debt</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <div class="d-flex flex-column">
                            <input type="date" class="form-control me-2" @bind="StartDate" />
                            <input type="date" class="form-control" @bind="EndDate" />
                        </div>
                    </div>
                </div>

                <!-- Tag Filter Section -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <h5>Filter by Tags</h5>
                        <div class="d-flex flex-wrap">
                            @foreach (var tag in AllTags)
                            {
                                <button class="btn btn-outline-primary mb-2 me-2 @GetTagButtonClass(tag)"
                                @onclick="() => ToggleTag(tag)">
                                    @tag
                                </button>
                            }
                        </div>
                    </div>
                </div>

                <!-- Table -->
<div class="table-responsive">
    <table class="table-striped table-hover table">
        <thead class="table-light">
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Amount</th>
                <th scope="col">Type</th>
                <th scope="col">Date <i class="fa-solid fa-sort" @onclick="ToggleSort"></i></th>
                <th scope="col">Tags</th>
                <th scope="col">Note</th>
                <th scope="col">Status</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
      <tbody>
                            @if (FilteredTransactions.Any())
                            {
                                @foreach (var transaction in FilteredTransactions)
                                {
                    <tr>
                        <td>@transaction.Title</td>
                        <td>@transaction.Amount.ToString("C")</td>
                        <td>@transaction.Type</td>
                        <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                        <td>@string.Join(", ", transaction.Tags)</td>
                        <td>@transaction.Note</td>
                        <td>@transaction.Status</td>
                                        <td>
                                            @if (transaction.Status == "pending")
                                            {
                                                <button class="btn btn-primary" @onclick="() => ClearDebt(transaction)">Clear Debt</button>
                                            }
                                            @if (!string.IsNullOrEmpty(transaction.ErrorMessage))
                                            {
                                                <div class="error-message">@transaction.ErrorMessage</div>
                                            }
                                        </td>

                    </tr>
                                }
                            }
                            else
                            {
            <tr>
                <td colspan="8" class="text-center">No transactions found.</td>
            </tr>
                            }
</tbody>


    </table>
</div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Transaction> Transactions { get; set; } = new();
        public string ErrorMessage { get; set; }
    private List<Transaction> FilteredTransactions => Transactions
    // If SearchText is not empty, filters transactions where the Title contains SearchText, ignoring case.

        .Where(t => string.IsNullOrWhiteSpace(SearchText) || t.Title.Contains(SearchText, StringComparison.OrdinalIgnoreCase))
       // If SelectedType is not empty, filters transactions that match the selected type.
        .Where(t => string.IsNullOrWhiteSpace(SelectedType) || t.Type == SelectedType)
      // If StartDate is specified, includes transactions with Date greater than or equal to StartDate.
        .Where(t => !StartDate.HasValue || t.Date >= StartDate.Value)
       // If EndDate is specified, includes transactions with Date less than or equal to EndDate.
        .Where(t => !EndDate.HasValue || t.Date <= EndDate.Value)
       // If the Tags list is empty, it includes all transactions.
        .Where(t => !Tags.Any() || t.Tags.Intersect(Tags).Any())
        .OrderBy(t => SortAscending ? t.Date : (DateTime?)null)
        .ThenByDescending(t => !SortAscending ? t.Date : (DateTime?)null)
        .ToList();

    private decimal TotalAmountTransactions { get; set; }
    private decimal CashInflow { get; set; }
    private decimal CashOfDebt { get; set; }

    private decimal CashOutflow { get; set; }
    private decimal TotalDebt { get; set; }
    private Transaction? HighestInflow => Transactions.Where(t => t.Type == "Income").OrderByDescending(t => t.Amount).FirstOrDefault();
    private Transaction? HighestOutflow => Transactions.Where(t => t.Type == "Expense").OrderByDescending(t => t.Amount).FirstOrDefault();
    private Transaction? HighestDebt => Transactions.Where(t => t.Type == "Debt").OrderByDescending(t => t.Amount).FirstOrDefault();
    private int TotalTransactions => Transactions.Count;
    private string SearchText { get; set; } = string.Empty;
    private string SelectedType { get; set; } = string.Empty;
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private List<string> Tags { get; set; } = new();
    private List<string> AllTags => Transactions.SelectMany(t => t.Tags).Distinct().ToList();
    private bool SortAscending { get; set; } = true;
    private bool IsError { get; set; } = false;

    protected override void OnInitialized()
    {
        LoadTransactionData();
        CalculateSummary();
    }

    private void LoadTransactionData()
    {
        try
        {
            string expenseFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Expense.json");
            string incomeFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Income.json");
            string debtFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Debt.json");

            if (File.Exists(expenseFilePath))
            {
                var expenseData = File.ReadAllText(expenseFilePath);
                var expenses = System.Text.Json.JsonSerializer.Deserialize<List<Expense>>(expenseData) ?? new List<Expense>();

                foreach (var expense in expenses)
                {
                    Transactions.Add(new Transaction
                    {
                        Title = expense.ExpenseItem ?? "Unknown",
                        Amount = expense.ExpenseCost ?? 0,
                        Type = "Expense",
                        Date = expense.ExpenseDate ?? DateTime.Today,
                        Tags = expense.Tags ?? new List<string>(),
                        Note = expense.Note ?? string.Empty,
                    });
                }
            }

            if (File.Exists(incomeFilePath))
            {
                var incomeData = File.ReadAllText(incomeFilePath);
                var incomes = System.Text.Json.JsonSerializer.Deserialize<List<Income>>(incomeData) ?? new List<Income>();

                foreach (var income in incomes)
                {
                    Transactions.Add(new Transaction
                    {
                        Title = income.IncomeTitle,
                        Amount = income.IncomeAmount,
                        Type = "Income",
                        Date = income.IncomeDate,
                        Tags = income.Tags ?? new List<string>(),
                        Note = income.Note ?? string.Empty
                    });
                }
            }

            if (File.Exists(debtFilePath))
            {
                var debtData = File.ReadAllText(debtFilePath);
                var debts = System.Text.Json.JsonSerializer.Deserialize<List<Debt>>(debtData) ?? new List<Debt>();

                foreach (var debt in debts)
                {
                    Transactions.Add(new Transaction
                    {
                        Title = debt.DebtTitle,
                        Amount = debt.DebtAmount,
                        Type = "Debt",
                        Date = debt.DebtDate,
                        Tags = debt.Tags ?? new List<string>(),
                        Note = debt.Note ?? string.Empty,
                        Status = debt.Status
                    });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($" {ex.Message}");
        }
    }

    private void CalculateSummary()
    {
        CashInflow = Transactions.Where(t => t.Type == "Income" || t.Type == "Debt").Sum(t => Math.Abs(t.Amount));
        CashOutflow = Transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);
        TotalDebt = Transactions.Where(t => t.Type == "Debt").Sum(t => t.Amount);
        TotalAmountTransactions = CashInflow - TotalDebt - CashOutflow;

        IsError = CashOutflow > TotalAmountTransactions;
    }

    private void AttemptTransaction(Transaction transaction)
    {
        if (transaction.Amount > TotalAmountTransactions)
        {
            ErrorMessage = $"Insufficient funds to complete transaction: {transaction.Title} for {transaction.Amount:C}";
            IsError = true;
            StateHasChanged();
        }
        else
        {
            // Process the transaction
            TotalAmountTransactions -= transaction.Amount;
            CalculateSummary();
            IsError = false;
        }
    }

    private void ToggleTag(string tag)
    {
        if (Tags.Contains(tag))
        {
            Tags.Remove(tag);
        }
        else
        {
            Tags.Add(tag);
        }
    }

    private string GetTagButtonClass(string tag)
    {
        return Tags.Contains(tag) ? "active btn-primary" : string.Empty;
    }

    private void ToggleSort()
    {
        SortAscending = !SortAscending;
    }

    private class Transaction
    {
        public string Title { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public string Type { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public List<string> Tags { get; set; } = new();
        public string Note { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public string ErrorMessage { get; set; }

    }

    private class Expense
    {
        public DateTime? ExpenseDate { get; set; }
        public string? ExpenseItem { get; set; }
        public decimal? ExpenseCost { get; set; }
        public List<string>? Tags { get; set; }
        public string? Note { get; set; }
    }

    private class Income
    {
        public string IncomeTitle { get; set; } = string.Empty;
        public decimal IncomeAmount { get; set; }
        public DateTime IncomeDate { get; set; }
        public List<string>? Tags { get; set; }
        public string? Note { get; set; }
    }

    private class Debt
    {
        public string DebtTitle { get; set; } = string.Empty;
        public decimal DebtAmount { get; set; }
        public DateTime DebtDate { get; set; }
        public List<string>? Tags { get; set; }
        public string? Note { get; set; }
        public string Status { get; set; } = string.Empty;
    }
    private void ClearDebt(Transaction transaction)
    {
        if (TotalAmountTransactions < transaction.Amount)
        {
            transaction.ErrorMessage = "Not enough funds to clear this debt.";
            StateHasChanged(); // Update the UI
            return;
        }

        // Update transaction status and error message
        transaction.Status = "cleared";
        transaction.ErrorMessage = string.Empty;

        // Deduct the amount from TotalAmountTransactions and TotalDebt
        TotalAmountTransactions -= transaction.Amount;
        TotalDebt -= transaction.Amount;

        try
        {
            string debtFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Debt.json");
            var debtData = File.ReadAllText(debtFilePath);
            var debts = System.Text.Json.JsonSerializer.Deserialize<List<Debt>>(debtData) ?? new List<Debt>();

            // Find the matching debt in the file and update its status
            var matchingDebt = debts.FirstOrDefault(d => d.DebtTitle == transaction.Title && d.DebtAmount == transaction.Amount && d.DebtDate == transaction.Date);
            if (matchingDebt != null)
            {
                matchingDebt.Status = "cleared";
            }

            // Save the updated debt data back to the file
            var updatedDebtData = System.Text.Json.JsonSerializer.Serialize(debts, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(debtFilePath, updatedDebtData);
        }
        catch (Exception ex)
        {
            transaction.ErrorMessage = $"Error updating debt status: {ex.Message}";
        }

        StateHasChanged(); 
    }


}
